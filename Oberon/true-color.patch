--- 1/ColorPalette.Mod.txt
+++ 2/ColorPalette.Mod.txt
@@ -4,9 +4,11 @@
   CONST Menu = "System.Close  System.Copy  System.Grow";
 
   PROCEDURE DrawPalette(F: Display.Frame);
-    VAR x, y, w, h, ww, hh: INTEGER;
-  BEGIN hh := LSL(1, Display.Depth DIV 2);
-    ww := LSL(1, Display.Depth - Display.Depth DIV 2);
+    VAR x, y, w, h, dd, ww, hh: INTEGER;
+  BEGIN
+    dd := Display.Depth; IF dd > 8 THEN dd := 8 END;
+    hh := LSL(1, dd DIV 2);
+    ww := LSL(1, dd - dd DIV 2);
     w := F.W DIV ww; h := F.H DIV hh;
     Display.ReplConst(Display.black, F.X, F.Y, F.W, F.H, Display.replace);
     FOR x := 0 TO ww - 1 DO
--- 1/Display.Mod.txt
+++ 2/Display.Mod.txt
@@ -1,5 +1,5 @@
 MODULE Display;  (*autodetect color or b/w*)
-  IMPORT SYSTEM, DisplayM, DisplayC, DisplayC8;
+  IMPORT SYSTEM, DisplayM, DisplayC, DisplayC8, DisplayC32;
 
   CONST black* = 0; white* = 15;  (*black = background*)
     replace* = 0; paint* = 1; invert* = 2;  (*modes*)
@@ -16,7 +16,7 @@
     arrow*, star*, hook*, updown*, block*, cross*, grey*: INTEGER;
     (*a pattern is an array of bytes; the first is its width (< 32), the second its height, the rest the raster*)
 
-    depth8Supported, depth4Supported, depth1Supported: BOOLEAN;
+    depth32Supported, depth8Supported, depth4Supported, depth1Supported: BOOLEAN;
 
   PROCEDURE Handle*(F: Frame; VAR M: FrameMsg);
   BEGIN
@@ -27,6 +27,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.InitResolution
     ELSIF Depth = 8 THEN DisplayC8.InitResolution
+    ELSIF Depth = 32 THEN DisplayC32.InitResolution
     ELSE DisplayM.InitResolution
     END
   END InitResolution;
@@ -79,11 +80,28 @@
     grey := DisplayC8.grey;
   END SwitchTo8BitColor;
 
+  PROCEDURE SwitchTo32BitColor;
+  BEGIN
+    Base := DisplayC32.Base;
+    Width := DisplayC32.Width;
+    Height := DisplayC32.Height;
+    Span := DisplayC32.Span;
+    Depth := 32;
+    arrow := DisplayC32.arrow;
+    star := DisplayC32.star;
+    hook := DisplayC32.hook;
+    updown := DisplayC32.updown;
+    block := DisplayC32.block;
+    cross := DisplayC32.cross;
+    grey := DisplayC32.grey;
+  END SwitchTo32BitColor;
+
   PROCEDURE SetSize*(w, h: INTEGER) : BOOLEAN;
     VAR result: BOOLEAN;
   BEGIN
     IF Depth = 4 THEN result := DisplayC.SetSize(w, h); SwitchTo4BitColor
     ELSIF Depth = 8 THEN result := DisplayC8.SetSize(w, h); SwitchTo8BitColor
+    ELSIF Depth = 32 THEN result := DisplayC32.SetSize(w, h); SwitchTo32BitColor
     ELSE result := DisplayM.SetSize(w, h); SwitchToMono
     END
   RETURN result
@@ -94,6 +112,7 @@
   BEGIN w := Width; h := Height; result := FALSE;
     IF (depth = 4) & depth4Supported  THEN SwitchTo4BitColor; result := TRUE
     ELSIF (depth = 8) & depth8Supported  THEN SwitchTo8BitColor; result := TRUE
+    ELSIF ((depth = 24) OR (depth = 32)) & depth32Supported THEN SwitchTo32BitColor; result := TRUE
     ELSIF (depth = 1) & depth1Supported THEN SwitchToMono; result := TRUE
     END;
     IF result THEN
@@ -109,6 +128,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.Dot(col, x, y, mode)
     ELSIF Depth = 8 THEN DisplayC8.Dot(col, x, y, mode)
+    ELSIF Depth = 32 THEN DisplayC32.Dot(col, x, y, mode)
     ELSE DisplayM.Dot(col, x, y, mode)
     END
   END Dot;
@@ -117,6 +137,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.ReplConst(col, x, y, w, h, mode)
     ELSIF Depth = 8 THEN DisplayC8.ReplConst(col, x, y, w, h, mode)
+    ELSIF Depth = 32 THEN DisplayC32.ReplConst(col, x, y, w, h, mode)
     ELSE DisplayM.ReplConst(col, x, y, w, h, mode)
     END
   END ReplConst;
@@ -125,6 +146,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.CopyPattern(col, patadr, x, y, mode)
     ELSIF Depth = 8 THEN DisplayC8.CopyPattern(col, patadr, x, y, mode)
+    ELSIF Depth = 32 THEN DisplayC32.CopyPattern(col, patadr, x, y, mode)
     ELSE DisplayM.CopyPattern(col, patadr, x, y, mode)
     END
   END CopyPattern;
@@ -133,6 +155,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.CopyBlock(sx, sy, w, h, dx, dy, mode)
     ELSIF Depth = 8 THEN DisplayC8.CopyBlock(sx, sy, w, h, dx, dy, mode)
+    ELSIF Depth = 32 THEN DisplayC32.CopyBlock(sx, sy, w, h, dx, dy, mode)
     ELSE DisplayM.CopyBlock(sx, sy, w, h, dx, dy, mode)
     END
   END CopyBlock;
@@ -141,6 +164,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.ReplPattern(col, patadr, x, y, w, h, mode)
     ELSIF Depth = 8 THEN DisplayC8.ReplPattern(col, patadr, x, y, w, h, mode)
+    ELSIF Depth = 32 THEN DisplayC32.ReplPattern(col, patadr, x, y, w, h, mode)
     ELSE DisplayM.ReplPattern(col, patadr, x, y, w, h, mode)
     END
   END ReplPattern;
@@ -150,6 +174,7 @@
   BEGIN
     IF Depth = 4 THEN result := DisplayC.GetPalette(col, val)
     ELSIF Depth = 8 THEN result := DisplayC8.GetPalette(col, val)
+    ELSIF Depth = 32 THEN result := DisplayC32.GetPalette(col, val)
     ELSE result := DisplayM.GetPalette(col, val)
     END
   RETURN result
@@ -159,6 +184,7 @@
   BEGIN
     IF Depth = 4 THEN DisplayC.SetPalette(col, val)
     ELSIF Depth = 8 THEN DisplayC8.SetPalette(col, val)
+    ELSIF Depth = 32 THEN DisplayC32.SetPalette(col, val)
     ELSE DisplayM.SetPalette(col, val)
     END
   END SetPalette;
@@ -175,7 +201,10 @@
     SYSTEM.PUT(-4, 38626356H); (* '8bcV' *)
     SYSTEM.GET(-4, modes);
     depth8Supported := modes > 0;
-    IF ~depth4Supported & ~depth8Supported THEN depth1Supported := TRUE END;
+    SYSTEM.PUT(-4, 74726356H); (* 'trcV' *)
+    SYSTEM.GET(-4, modes);
+    depth32Supported := modes > 0;
+    IF ~depth4Supported & ~depth8Supported & ~depth32Supported THEN depth1Supported := TRUE END;
     IF depth1Supported THEN
       DisplayM.InitResolution;
       IF DisplayM.Span # 0 THEN SwitchToMono END
@@ -188,10 +217,15 @@
       DisplayC8.InitResolution;
       IF DisplayC8.Span # 0 THEN SwitchTo8BitColor END
     END;
+    IF depth32Supported THEN
+      DisplayC32.InitResolution;
+      IF DisplayC32.Span # 0 THEN SwitchTo32BitColor END
+    END;
     IF Depth = 0 THEN (* unknown/unsupported mode active *)
       IF depth1Supported THEN SwitchToMono
       ELSIF depth4Supported THEN SwitchTo4BitColor
       ELSIF depth8Supported THEN SwitchTo8BitColor
+      ELSIF depth32Supported THEN SwitchTo32BitColor
       END;
       IF Depth # 0 THEN tmp := SetSize(Width, Height) END
     END
--- 1/DisplayGrab.Mod.txt
+++ 2/DisplayGrab.Mod.txt
@@ -11,6 +11,8 @@
       SYSTEM.GET(a, col); col := ASR(col, (x MOD 8) * 4) MOD 10H;
     ELSIF Display.Depth = 8 THEN
       SYSTEM.GET(a, col); col := ASR(col, (x MOD 4) * 8) MOD 100H;
+    ELSIF Display.Depth = 32 THEN
+      SYSTEM.GET(a, col); col := col DIV 1000000H MOD 40H
     ELSE
       col := 0
     END
--- 1/SeamlessResize0.Mod.txt
+++ 2/SeamlessResize.Mod.txt
@@ -27,9 +27,10 @@
   BEGIN val := 40000000H;
     IF Display.Depth = 4 THEN val := 0C0000000H END;
     IF Display.Depth = 8 THEN val := 080000000H END;
+    IF Display.Depth = 32 THEN val := 0A0000000H END;
     SYSTEM.PUT(hwAddr, val);
     SYSTEM.GET(hwAddr, val);
-    w := val DIV 8000H MOD 8000H;
+    w := val DIV 8000H MOD 4000H;
     h := val MOD 8000H;
     IF (w # Display.Width) OR (h # Display.Height) THEN
       IF Display.SetSize(w, h) THEN
@@ -44,6 +45,7 @@
     hwid := Kernel.ToHardwareID("mDyn");
     IF Display.Depth = 4 THEN hwid := Kernel.ToHardwareID("16cD") END;
     IF Display.Depth = 8 THEN hwid := Kernel.ToHardwareID("8bcD") END;
+    IF Display.Depth = 32 THEN hwid := Kernel.ToHardwareID("trcD") END;
     SYSTEM.PUT(Kernel.hwEnumerator, hwid);
     SYSTEM.GET(Kernel.hwEnumerator, hwAddr);
     SYSTEM.GET(Kernel.hwEnumerator, val);
@@ -59,6 +61,6 @@
 
 BEGIN
   installed := FALSE;
-  IF (Display.Depth = 1) OR (Display.Depth = 4) OR (Display.Depth = 8) THEN Init ELSE hwAddr := 0 END;
+  IF (Display.Depth = 1) OR (Display.Depth = 4) OR (Display.Depth = 8) OR (Display.Depth = 32) THEN Init ELSE hwAddr := 0 END;
   t := Oberon.NewTask(Check, 5000);
 END SeamlessResize.
