MODULE BootLoadBigMemoryConfig;
  IMPORT SYSTEM, Files, Texts, Oberon;

  PROCEDURE SetSize*();
    VAR
      s: Texts.Scanner;
      beg, end, time, memSize, stackSize: INTEGER;
      t: Texts.Text;
      f: Files.File;
      r: Files.Rider;
  BEGIN
    Texts.OpenScanner(s, Oberon.Par.text, Oberon.Par.pos);
    Texts.Scan(s);
    IF (s.class = Texts.Char) & (s.c = "^") THEN
      Oberon.GetSelection(t, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(s, t, beg); Texts.Scan(s);
      END
    END;
    memSize := s.i * 100000H;
    Texts.Scan(s);
    stackSize := s.i * 100000H;
    IF (s.i = 0) OR (s.class # Texts.Int) THEN stackSize := memSize DIV 2 END;
    f := Files.Old("BootLoad.Bin");
    Files.Set(r, f, 0ECH);
    Files.WriteByte(r, 0);
    Files.WriteByte(r, 0);
    Files.Set(r, f, 0E8H);
    Files.WriteByte(r, memSize DIV 10000H MOD 100H);
    Files.WriteByte(r, memSize DIV 1000000H MOD 100H);
    Files.Set(r, f, 0B8H);
    Files.WriteByte(r, stackSize DIV 10000H MOD 100H);
    Files.WriteByte(r, stackSize DIV 1000000H MOD 100H);
    Files.Set(r, f, 0F8H);
    Files.WriteByte(r, stackSize DIV 10000H MOD 100H);
    Files.WriteByte(r, stackSize DIV 1000000H MOD 100H);
    Files.Set(r, f, 07F4H);
    Files.WriteInt(r, 0FFF00000H);
    Files.WriteInt(r, 0FCE00000H);
    Files.WriteInt(r, memSize DIV 100000H);
    Files.Close(f);
  END SetSize;

END BootLoadBigMemoryConfig.

(*
BootLoadBigMemoryConfig.SetSize 1 0
BootLoadBigMemoryConfig.SetSize ^
   4 0
   4 1
   4 3
   16 0
   64 0
   256 0
   1024 0
*)