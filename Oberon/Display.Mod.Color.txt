MODULE Display;  (*NW 5.11.2013*)
  IMPORT SYSTEM;

  CONST black* = 0; white* = 15;  (*black = background*)
    replace* = 0; paint* = 1; invert* = 2;  (*modes*)
    base = 0E7F00H;  (*adr of 1024 x 768 pixel, monocolor display frame*)

  TYPE Frame* = POINTER TO FrameDesc;
    FrameMsg* = RECORD END ;
    Handler* = PROCEDURE (F: Frame; VAR M: FrameMsg);
    FrameDesc* = RECORD next*, dsc*: Frame;
        X*, Y*, W*, H*: INTEGER;
        handle*: Handler
      END ;

  VAR Base*, Width*, Height*: INTEGER;
    arrow*, star*, hook*, updown*, block*, cross*, grey*: INTEGER;
    (*a pattern is an array of bytes; the first is its width (< 32), the second its height, the rest the raster*)
    memWindowOffset: INTEGER;

  PROCEDURE Handle*(F: Frame; VAR M: FrameMsg);
  BEGIN
    IF (F # NIL) & (F.handle # NIL) THEN F.handle(F, M) END
  END Handle;

  PROCEDURE SetSize*(w, h: INTEGER) : BOOLEAN;
  RETURN FALSE
  END SetSize;

  (* raster ops *)

  PROCEDURE EnsureOffsetUsable(offs: INTEGER);
  BEGIN
    offs := offs - base; (* note: DEC does not work here! *)
    IF (offs < memWindowOffset) OR (offs >= memWindowOffset + 768 * 1024 DIV 8) THEN
      memWindowOffset := (offs - 768 * 1024 DIV 8 DIV 2) DIV 4 * 4;
      IF memWindowOffset < 0 THEN memWindowOffset := 0 END;
      SYSTEM.PUT(-16, memWindowOffset DIV 4);
    END
  END EnsureOffsetUsable;

  PROCEDURE MakeMask(col, x1, x2: INTEGER) : SET;
    VAR r: SET;
  BEGIN
    x1 := (x1 MOD 4) * 8;
    x2 := (x2 MOD 4) * 8;
    r := SYSTEM.VAL(SET, LSL(col, x1));
    WHILE x1 < x2 DO
      INC(x1, 8);
      r := r + SYSTEM.VAL(SET, LSL(col, x1));
    END
  RETURN r
  END MakeMask;

  PROCEDURE Dot*(col, x, y, mode: INTEGER);
    VAR a: INTEGER; u, s: SET;
  BEGIN a := base + (x DIV 4)*4 + y*4096;
    EnsureOffsetUsable(a);
    DEC(a, memWindowOffset);
    s := MakeMask(col, x, x);
    SYSTEM.GET(a, u);
    IF mode = invert THEN
      SYSTEM.PUT(a, u / s)
    ELSE
      SYSTEM.PUT(a, u - MakeMask(0FFH, x, x) + s)
    END
  END Dot;

  PROCEDURE ReplConst*(col, x, y, w, h, mode: INTEGER);
    VAR al, ar, a0, a1: INTEGER; left, right, mid, pix, pixl, pixr, mleft, mright: SET;
  BEGIN al := base + y*4096;
    ar := ((x+w-1) DIV 4)*4 + al; al := (x DIV 4)*4 + al;
    IF ar = al THEN
      mid := MakeMask(col, x, x+w-1);
      FOR a1 := al TO al + (h-1)*4096 BY 4096 DO
        EnsureOffsetUsable(a1);
        SYSTEM.GET(a1 - memWindowOffset, pix);
        IF mode = invert THEN SYSTEM.PUT(a1 - memWindowOffset, pix / mid)
        ELSE SYSTEM.PUT(a1 - memWindowOffset, pix - MakeMask(0FFH, x, x+w-1) + mid)
        END
      END
    ELSE
      left := MakeMask(col, x, 3); right := MakeMask(col, 0, x+w-1);
      mid := MakeMask(col, 0, 3);
      IF mode # invert THEN
        mleft := MakeMask(0FFH, x, 3); mright := MakeMask(0FFH, 0, x+w-1);
      END;
      FOR a0 := al TO al + (h-1)*4096 BY 4096 DO
        EnsureOffsetUsable(a0);
        EnsureOffsetUsable(ar);
        SYSTEM.GET(a0 - memWindowOffset, pixl); SYSTEM.GET(ar - memWindowOffset, pixr);
        IF mode = invert THEN
          SYSTEM.PUT(a0 - memWindowOffset, pixl / left);
          FOR a1 := a0+4-memWindowOffset TO ar-4-memWindowOffset BY 4 DO SYSTEM.GET(a1, pix); SYSTEM.PUT(a1, pix / mid) END;
          SYSTEM.PUT(ar - memWindowOffset, pixr / right)
        ELSE
          SYSTEM.PUT(a0 - memWindowOffset, pixl - mleft + left);
          FOR a1 := a0+4-memWindowOffset TO ar-4-memWindowOffset BY 4 DO SYSTEM.PUT(a1, mid) END;
          SYSTEM.PUT(ar - memWindowOffset, pixr - mright + right)
        END;
        INC(ar, 4096)
      END
    END
  END ReplConst;

  PROCEDURE CopyPattern*(col, patadr, x, y, mode: INTEGER);  (*only for modes = paint, invert*)
    VAR a, a0, a1, i, ww, pwd, xx: INTEGER;
      w, h, pbt: BYTE; pix: SET;
  BEGIN SYSTEM.GET(patadr, w); SYSTEM.GET(patadr+1, h); INC(patadr, 2);
    a := base + (x DIV 4)*4 + y*4096;
    ww := (x + w - 1) DIV 4 - x DIV 4;
    FOR a0 := a TO a + (h-1)*4096 BY 4096 DO
      (*build pattern line; w < 32*)
      SYSTEM.GET(patadr, pbt); INC(patadr); pwd := pbt;
      IF w > 8 THEN SYSTEM.GET(patadr, pbt); INC(patadr); pwd := pbt*100H + pwd;
        IF w > 16 THEN SYSTEM.GET(patadr, pbt); INC(patadr); pwd := pbt*10000H + pwd;
          IF w > 24 THEN SYSTEM.GET(patadr, pbt); INC(patadr); pwd := pbt*1000000H + pwd END
        END
      END;
      xx := x DIV 4 * 4;
      FOR a1 := a0 TO a0 + ww * 4 BY 4 DO
        EnsureOffsetUsable(a1);
        SYSTEM.GET(a1 - memWindowOffset, pix);
        FOR i := xx TO xx+3 DO
          IF (i >= x) & (i < x+w) THEN
            IF (mode # invert) THEN
              pix := pix - MakeMask(0FFH, i-xx, i-xx)
            END;
            IF SYSTEM.VAL(SET, pwd) * {i-x} # {} THEN
              pix := pix / MakeMask(col, i-xx, i-xx)
            END
          END
        END;
        SYSTEM.PUT(a1 - memWindowOffset, pix);
        INC(xx, 4);
      END
    END
  END CopyPattern;

  PROCEDURE CopyBlock*(sx, sy, w, h, dx, dy, mode: INTEGER); (*only for mode = replace*)
    VAR sa, da, sa0, sa1, d, len: INTEGER;
      u0, u1, u2, u3, v0, v1, v2, v3, n: INTEGER;
      end, step: INTEGER;
      src, dst, spill: SET;
      m0, m1, m2, m3: SET;
  BEGIN
    u0 := sx DIV 4; u1 := sx MOD 4; u2 := (sx+w) DIV 4; u3 := (sx+w) MOD 4;
    v0 := dx DIV 4; v1 := dx MOD 4; v2 := (dx+w) DIV 4; v3 := (dx+w) MOD 4;
    sa := base + u0*4 + sy*4096; da := base + v0*4 + dy*4096;
    d := da - sa; n := u1 - v1;   (*displacement in words and bits*)
    len := (u2 - u0) * 4;
    m0 := MakeMask(0FFH, v1, 3); m2 := MakeMask(0FFH, v3, 2); m3 := m0 / m2;
    IF d >= 0 THEN (*copy up, scan down*) sa0 := sa + (h-1)*4096; end := sa-4096; step := -4096
    ELSE (*copy down, scan up*) sa0 := sa; end := sa + h*4096; step := 4096
    END ;
    WHILE sa0 # end DO
      IF n >= 0 THEN (*shift right*) m1 := MakeMask(0FFH, n, 3);
        IF v1 + w >= 4 THEN
          EnsureOffsetUsable(sa0+len);
          SYSTEM.GET(sa0+len - memWindowOffset, src); src := ROR(src, n * 8);
          EnsureOffsetUsable(sa0+len+d);
          SYSTEM.GET(sa0+len+d - memWindowOffset, dst);
          SYSTEM.PUT(sa0+len+d - memWindowOffset, (dst * m2) + (src - m2));
          spill := src - m1;
          FOR sa1 := sa0 + len-4 TO sa0+4  BY -4 DO
            EnsureOffsetUsable(sa1);
            SYSTEM.GET(sa1 - memWindowOffset, src); src := ROR(src, n * 8);
            EnsureOffsetUsable(sa1+d);
            SYSTEM.PUT(sa1+d - memWindowOffset, spill + (src * m1));
            spill := src - m1
          END ;
          EnsureOffsetUsable(sa0);
          SYSTEM.GET(sa0-memWindowOffset, src); src := ROR(src, n*8);
          EnsureOffsetUsable(sa0+d);
          SYSTEM.GET(sa0+d-memWindowOffset, dst);
          SYSTEM.PUT(sa0+d-memWindowOffset, (src * m0) + (dst - m0))
        ELSE
          EnsureOffsetUsable(sa0);
          SYSTEM.GET(sa0-memWindowOffset, src); src := ROR(src, n*8);
          EnsureOffsetUsable(sa0+d);
          SYSTEM.GET(sa0+d-memWindowOffset, dst);
          SYSTEM.PUT(sa0+d-memWindowOffset, (src * m3) + (dst - m3))
        END
      ELSE (*shift left*) m1 := MakeMask(0FFH, -n, 3);
        EnsureOffsetUsable(sa0);
        SYSTEM.GET(sa0-memWindowOffset, src); src := ROR(src, n*8);
        EnsureOffsetUsable(sa0+d);
        SYSTEM.GET(sa0+d-memWindowOffset, dst);
        IF v1 + w < 4 THEN
          SYSTEM.PUT(sa0+d-memWindowOffset, (dst - m3) + (src * m3))
        ELSE SYSTEM.PUT(sa0+d-memWindowOffset, (dst - m0) + (src * m0));
          spill := src - m1;
          FOR sa1 := sa0+4 TO sa0 + len-4 BY 4 DO
            EnsureOffsetUsable(sa1);
            SYSTEM.GET(sa1-memWindowOffset, src); src := ROR(src, n*8);
            EnsureOffsetUsable(sa1+d);
            SYSTEM.PUT(sa1+d-memWindowOffset, spill + (src * m1));
            spill := src - m1
          END ;
          EnsureOffsetUsable(sa0+len);
          SYSTEM.GET(sa0+len-memWindowOffset, src); src := ROR(src, n*8);
          EnsureOffsetUsable(sa0+len+d);
          SYSTEM.GET(sa0+len+d-memWindowOffset, dst);
          SYSTEM.PUT(sa0+len+d-memWindowOffset, (src - m2) + (dst * m2))
        END
      END ;
      INC(sa0, step)
    END
  END CopyBlock;

  PROCEDURE ConvPattern(col: INTEGER; VAR ptw: SET);
  VAR i: INTEGER; x : SET;
  BEGIN
    x := ptw;
    ptw := {};
    FOR i := 0 TO 3 DO
        IF x * {i} # {} THEN ptw := ptw + MakeMask(col, i, i) END
    END
  END ConvPattern;

  PROCEDURE ReplPattern*(col, patadr, x, y, w, h, mode: INTEGER);
  (* pattern width = 32, fixed; pattern starts at patadr+4, for mode = invert only *)
  (* uses only first nybble of each row! *)
    VAR al, ar, a0, a1: INTEGER;
      pta0, pta1: INTEGER;  (*pattern addresses*)
      ph: BYTE;
      left, right, mid, pix, pixl, pixr, ptw: SET;
  BEGIN al := base + y*4096; SYSTEM.GET(patadr+1, ph);
    pta0 := patadr+4; pta1 := ph*4 + pta0;
    ar := ((x+w-1) DIV 4)*4 + al; al := (x DIV 4)*4 + al;
    IF ar = al THEN
      mid := MakeMask(0FFH, x, x+w-1);
      FOR a1 := al TO al + (h-1)*4096 BY 4096 DO
        EnsureOffsetUsable(a1);
        SYSTEM.GET(a1 - memWindowOffset, pix);
        SYSTEM.GET(pta0, ptw);
        ConvPattern(col, ptw);
        SYSTEM.PUT(a1 - memWindowOffset, (pix - mid) + (pix/ptw * mid)); INC(pta0, 4);
        IF pta0 = pta1 THEN pta0 := patadr+4 END
      END
    ELSE
      left := MakeMask(0FFH, x, 3); right := MakeMask(0FFH, 0, x+w-1);
      FOR a0 := al TO al + (h-1)*4096 BY 4096 DO
        EnsureOffsetUsable(a0);
        EnsureOffsetUsable(ar);
        SYSTEM.GET(a0 - memWindowOffset, pixl);
        SYSTEM.GET(pta0, ptw);
        ConvPattern(col, ptw);
        SYSTEM.PUT(a0 - memWindowOffset, (pixl - left) + (pixl/ptw * left));
        FOR a1 := a0+4 TO ar-4 BY 4 DO
          SYSTEM.GET(a1 - memWindowOffset, pix);
          SYSTEM.PUT(a1 - memWindowOffset, pix/ptw)
        END;
        SYSTEM.GET(ar - memWindowOffset, pixr);
        SYSTEM.PUT(ar - memWindowOffset, (pixr - right) + (pixr/ptw * right));
        INC(pta0, 4); INC(ar, 4096);
        IF pta0 = pta1 THEN pta0 := patadr+4 END
      END
    END
  END ReplPattern;

BEGIN Base := base;
  SYSTEM.GET(-16, Height);
  Width := Height DIV 10000H;
  Height := Height MOD 10000H;
  memWindowOffset := 1;
  EnsureOffsetUsable(base);
  arrow := SYSTEM.ADR($0F0F 0060 0070 0038 001C 000E 0007 8003 C101 E300 7700 3F00 1F00 3F00 7F00 FF00$);
  star := SYSTEM.ADR($0F0F 8000 8220 8410 8808 9004 A002 C001 7F7F C001 A002 9004 8808 8410 8220 8000$);
  hook := SYSTEM.ADR($0C0C 070F 8707 C703 E701 F700 7F00 3F00 1F00 0F00 0700 0300 01$);
  updown := SYSTEM.ADR($080E 183C 7EFF 1818 1818 1818 FF7E3C18$);
  block := SYSTEM.ADR($0808 FFFF C3C3 C3C3 FFFF$);
  cross := SYSTEM.ADR($0F0F 0140 0220 0410 0808 1004 2002 4001 0000 4001 2002 1004 0808 0410 0220 0140$);
  grey := SYSTEM.ADR($2002 0000 5555 5555 AAAA AAAA$)
END Display.
