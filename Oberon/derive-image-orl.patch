--- 1/ImageORL.Mod.txt
+++ 2/ImageORL.Mod.txt
@@ -1,5 +1,5 @@
-MODULE Modules;  (*Link and load on RISC; NW 20.10.2013 / 8.1.2019*)
-  IMPORT SYSTEM, Files;
+MODULE ImageORL;
+  IMPORT SYSTEM, Kernel, Files;
   CONST versionkey = 1X; MT = 12; DescSize = 80;
 
   TYPE Module* = POINTER TO ModDesc;
@@ -8,15 +8,23 @@
 
     ModDesc* = RECORD
         name*: ModuleName;
-        next*: Module;
+        next*: INTEGER;
         key*, num*, size*, refcnt*: INTEGER;
         data*, code*, imp*, cmd*, ent*, ptr*, unused: INTEGER  (*addresses*)
       END ;
 
+    Buff = POINTER TO BuffDesc;
+    BuffDesc = RECORD
+        a: ARRAY 0C000H OF BYTE (* 48K ought to be enough for anybody *)
+    END;
+
   VAR root*, M: Module;
     MTOrg*, AllocPtr*, res*: INTEGER;
     importing*, imported*: ModuleName;
     limit: INTEGER;
+    NILMOD: Module;
+    ImageOffset: INTEGER;
+    UseImage: BOOLEAN;
 
   PROCEDURE ThisFile(name: ARRAY OF CHAR): Files.File;
     VAR i: INTEGER;
@@ -24,6 +32,7 @@
   BEGIN i := 0;
     WHILE name[i] # 0X DO filename[i] := name[i]; INC(i) END ;
     filename[i] := "."; filename[i+1] := "r"; filename[i+2] := "s"; filename[i+3] := "c"; filename[i+4] := 0X;
+    IF UseImage THEN filename[i+4] := "."; filename[i+5] := "X"; filename[i+6] := 0X END;
     RETURN Files.Old(filename)
   END ThisFile;
 
@@ -50,15 +59,15 @@
       i, n, key, impkey, mno, nofimps, size: INTEGER;
       p, u, v, w: INTEGER;  (*addresses*)
       ch: CHAR;
-      body: Command;
+      body: INTEGER;
       fixorgP, fixorgD, fixorgT: INTEGER;
       disp, adr, inst, pno, vno, dest, offset: INTEGER;
       name1, impname: ModuleName;
       F: Files.File; R: Files.Rider;
       import: ARRAY 16 OF Module;
   BEGIN mod := root; error(0, name); nofimps := 0;
-    WHILE (mod # NIL) & (name # mod.name) DO mod := mod.next END ;
-    IF mod = NIL THEN (*load*)
+    WHILE (mod # NILMOD) & (name # mod.name) DO mod := SYSTEM.VAL(Module, ImageOffset + mod.next) END ;
+    IF mod = NILMOD THEN (*load*)
       Check(name);
       IF res = 0 THEN F := ThisFile(name) ELSE F := NIL END ;
       IF F # NIL THEN
@@ -82,20 +91,26 @@
       END ;
       IF res = 0 THEN (*search for a hole in the list allocate and link*)
         INC(size, DescSize); mod := root;
-        WHILE (mod # NIL) & ~((mod.name[0] = 0X) & (mod.size >= size)) DO mod := mod.next END ;
-        IF mod = NIL THEN (*no large enough hole was found*)
+        WHILE (mod # NILMOD) & ~((mod.name[0] = 0X) & (mod.size >= size)) DO mod := SYSTEM.VAL(Module, ImageOffset + mod.next) END ;
+        IF mod = NILMOD THEN (*no large enough hole was found*)
           IF AllocPtr + size < limit THEN (*allocate*)
-            p := AllocPtr; mod := SYSTEM.VAL(Module, p);
-            AllocPtr := (p + size + 100H) DIV 20H * 20H; mod.size := AllocPtr - p; mod.num := root.num + 1;
-            mod.next := root; root := mod
+            p := AllocPtr; mod := SYSTEM.VAL(Module, ImageOffset + p);
+            AllocPtr := (p + size + 100H) DIV 20H * 20H; mod.size := AllocPtr - p;
+            IF root = NILMOD THEN
+              mod.num := 1
+            ELSE
+              mod.num := root.num + 1
+            END;
+            mod.next := SYSTEM.VAL(INTEGER, root) - ImageOffset; root := mod
           ELSE error(7, name1)
           END
-        ELSE (*fill hole*) p := SYSTEM.VAL(INTEGER, mod)
+        ELSE (*fill hole*) p := SYSTEM.VAL(INTEGER, mod) - ImageOffset;
         END
       END ; 
       IF res = 0 THEN (*read file*)
         INC(p, DescSize); (*allocate descriptor*)
         mod.name := name; mod.key := key; mod.refcnt := 0;
+        FOR i := 0 TO 30 DO IF mod.name[i] = 0X THEN mod.name[i+1] := 0X END END;
         mod.data := p;  (*data*)
         SYSTEM.PUT(ImageOffset + mod.num * 4 + MTOrg, p);  (*module table entry*)
         Files.ReadInt(R, n);
@@ -127,9 +142,9 @@
         WHILE w >= 0 DO SYSTEM.PUT(ImageOffset + p, mod.data + w); INC(p, 4); Files.ReadInt(R, w) END ;
         SYSTEM.PUT(ImageOffset + p, 0); INC(p, 4);
         Files.ReadInt(R, fixorgP); Files.ReadInt(R, fixorgD); Files.ReadInt(R, fixorgT);
-        Files.ReadInt(R, w); body := SYSTEM.VAL(Command, mod.code + w);
+        Files.ReadInt(R, w); body := mod.code + w;
         Files.Read(R, ch);
-        IF ch # "O" THEN (*corrupted file*)  mod := NIL; error(4, name) END
+        IF ch # "O" THEN (*corrupted file*)  mod := NILMOD; error(4, name) END
       END ;
       IF res = 0 THEN (*fixup of BL*)
         adr := mod.code + fixorgP*4;
@@ -177,7 +192,7 @@
           END ;
           SYSTEM.PUT(ImageOffset + adr, inst); adr := adr - disp*4
         END ;
-        body   (*initialize module*)
+        SYSTEM.PUT(ImageOffset, 0E7000000H + body DIV 4 -1);
       ELSIF res >= 3 THEN importing := name;
         WHILE nofimps > 0 DO DEC(nofimps); DEC(import[nofimps].refcnt) END
       END 
@@ -185,6 +200,106 @@
     newmod :=  mod
   END Load;
 
+  PROCEDURE DoLink(ui: BOOLEAN; bufptr: INTEGER);
+    VAR
+      newmod: Module;
+      i: INTEGER; bb: BYTE;
+  BEGIN
+    UseImage := ui; bb := 0;
+    FOR i := 0 TO 0C000H - 1 DO SYSTEM.PUT(bufptr+i, bb) END;
+    ImageOffset := bufptr;
+    MTOrg := 20H;    
+    AllocPtr := 100H;
+    NILMOD := SYSTEM.VAL(Module, ImageOffset); (* NIL *)
+    root := NILMOD;
+    limit := 40000H;
+    Load("Modules", newmod); NILMOD := NIL;
+    SYSTEM.PUT(ImageOffset + 10H, AllocPtr);
+    SYSTEM.PUT(ImageOffset + 14H, SYSTEM.VAL(INTEGER, root) - ImageOffset);
+    SYSTEM.PUT(ImageOffset + 18H, limit); root := NIL;
+  END DoLink;
+
+  PROCEDURE Link*();
+    VAR
+      buf: BuffDesc;
+      f: Files.File;
+      r: Files.Rider;
+      i, adr: INTEGER;
+  BEGIN
+    adr := SYSTEM.ADR(buf);
+    DoLink(TRUE, adr);
+    f := Files.Old("DiskImage.Bin");
+    Files.Set(r, f, 400H);
+    FOR i := 0 TO AllocPtr - 1 DO
+        Files.WriteByte(r, buf.a[i])
+    END;
+    Files.Close(f);
+  END Link;
+
+  PROCEDURE Install*();
+    VAR
+      idx, i, sector, adr: INTEGER;
+      secbuf: Kernel.Sector;
+      buf: BuffDesc;
+  BEGIN
+    adr := SYSTEM.ADR(buf);
+    DoLink(FALSE, adr);
+    idx := 0;
+    sector := 2 * 29;
+    WHILE (idx < AllocPtr) DO
+        FOR i := 0 TO Kernel.SectorLength-1 DO secbuf[i] := buf.a[idx+i] END;
+        Kernel.PutSector(sector, secbuf);
+        INC(sector, 29);
+        INC(idx, Kernel.SectorLength);
+    END;
+  END Install;
+
+  PROCEDURE CopyLinkArea*();
+    VAR
+      idx, i, sector, adr, end: INTEGER;
+      secbuf: Kernel.Sector;
+      f: Files.File;
+      r: Files.Rider;
+  BEGIN
+    end := 1024;
+    idx := 0;
+    sector := 2 * 29;
+    f := Files.Old("DiskImage.Bin");
+    Files.Set(r, f, 800H);
+    WHILE (idx < end) DO
+        Kernel.GetSector(sector, secbuf);
+        FOR i := 0 TO Kernel.SectorLength-1 DO Files.WriteByte(r, secbuf[i]) END;
+	IF (sector = 2 * 29) THEN
+	   SYSTEM.GET(SYSTEM.ADR(secbuf)+16, end)
+	END;
+        INC(sector, 29);
+        INC(idx, Kernel.SectorLength)
+    END;
+    Files.Close(f);
+  END CopyLinkArea;
+
+  PROCEDURE ExtractBootROM*();
+    VAR
+      if: Files.File;
+      ir: Files.Rider;
+      of: Files.File;
+      or: Files.Rider;
+      b: BYTE;
+      i: INTEGER;
+  BEGIN
+    if := Files.Old("BootLoad.rsc");
+    of := Files.New("BootLoad.Bin");
+    Files.Set(ir, if, 35);
+    Files.Set(or, of, 0);
+    FOR i := 0 TO 2047 DO
+      Files.ReadByte(ir, b);
+      Files.WriteByte(or, b)
+    END;
+    Files.Close(if);
+    Files.Register(of);
+  END ExtractBootROM;
+
+(*
   PROCEDURE ThisCommand*(mod: Module; name: ARRAY OF CHAR): Command;
     VAR k, adr, w: INTEGER; ch: CHAR;
       s: ARRAY 32 OF CHAR;
@@ -223,3 +314,6 @@
 BEGIN Init; Load("Oberon", M);
     LED(res); REPEAT UNTIL FALSE  (*only if load fails*)
 END Modules.
+*)
+
+END ImageORL.
