diff -Naur experimental2_orig/Input.Mod.txt experimental2/Input.Mod.txt
--- experimental2_orig/Input.Mod.txt	2016-12-27 23:28:21.984286400 +0100
+++ experimental2/Input.Mod.txt	2016-12-27 23:23:56.381734800 +0100
@@ -2,9 +2,8 @@
   IMPORT SYSTEM;
 
   CONST msAdr = -40; kbdAdr = -36;
-  VAR kbdCode: BYTE; (*last keyboard code read*)
-    Recd, Up, Shift, Ctrl, Ext: BOOLEAN;
-    KTabAdr: INTEGER;  (*keyboard code translation table*)
+  VAR kbdCode: INTEGER; (*last keyboard code read*)
+    Recd: BOOLEAN;
     MW, MH, MX, MY: INTEGER; (*mouse limits and coords*)
     MK: SET; (*mouse keys*)
 
@@ -15,15 +14,12 @@
   BEGIN
     IF SYSTEM.BIT(msAdr, 28) THEN
       SYSTEM.GET(kbdAdr, kbdCode);
-      IF kbdCode = 0F0H THEN Up := TRUE
-      ELSIF kbdCode = 0E0H THEN Ext := TRUE
-      ELSE
-        IF (kbdCode = 12H) OR (kbdCode = 59H) THEN (*shift*) Shift := ~Up
-        ELSIF kbdCode = 14H THEN (*ctrl*) Ctrl := ~Up
-        ELSIF ~Up THEN Recd := TRUE (*real key going down*)
-        END ;
-        Up := FALSE; Ext := FALSE
-      END
+      kbdCode := kbdCode DIV 1000000H;
+      WHILE (~Recd) & (kbdCode = 0H) & (SYSTEM.BIT(msAdr, 28)) DO
+        SYSTEM.GET(kbdAdr, kbdCode);
+        kbdCode := kbdCode DIV 1000000H
+      END;
+      IF kbdCode # 0H THEN Recd := TRUE END;
     END;
   END Peek;
 
@@ -35,10 +31,7 @@
   PROCEDURE Read*(VAR ch: CHAR);
   BEGIN
     WHILE ~Recd DO Peek() END ;
-    IF Shift OR Ctrl THEN INC(kbdCode, 80H) END; (*ctrl implies shift*)
-  (* ch := kbdTab[kbdCode]; *)
-    SYSTEM.GET(KTabAdr + kbdCode, ch);
-    IF Ctrl THEN ch := CHR(ORD(ch) MOD 20H) END;
+    ch := CHR(kbdCode);
     Recd := FALSE
   END Read;
 
@@ -55,24 +48,7 @@
   END SetMouseLimits;
 
   PROCEDURE Init*;
-  BEGIN Up := FALSE; Shift := FALSE; Ctrl := FALSE; Recd := FALSE;
-    KTabAdr := SYSTEM.ADR($
-      00 00 00 00 00 1A 00 00  00 00 00 00 00 09 60 00
-      00 00 00 00 00 71 31 00  00 00 7A 73 61 77 32 00
-      00 63 78 64 65 34 33 00  00 20 76 66 74 72 35 00
-      00 6E 62 68 67 79 36 00  00 00 6D 6A 75 37 38 00
-      00 2C 6B 69 6F 30 39 00  00 2E 2F 6C 3B 70 2D 00
-      00 00 27 00 5B 3D 00 00  00 00 0D 5D 00 5C 00 00
-      00 00 00 00 00 00 08 00  00 00 00 00 00 00 00 00
-      00 7F 00 00 00 00 1B 00  00 00 00 00 00 00 00 00
-      00 00 00 00 00 00 00 00  00 00 00 00 00 09 7E 00
-      00 00 00 00 00 51 21 00  00 00 5A 53 41 57 40 00
-      00 43 58 44 45 24 23 00  00 20 56 46 54 52 25 00
-      00 4E 42 48 47 59 5E 00  00 00 4D 4A 55 26 2A 00
-      00 3C 4B 49 4F 29 28 00  00 3E 3F 4C 3A 50 5F 00
-      00 00 22 00 7B 2B 00 00  00 00 0D 7D 00 7C 00 00
-      00 00 00 00 00 00 08 00  00 00 00 00 00 00 00 00
-      00 7F 00 00 00 00 1B 00  00 00 00 00 00 00 00 00$)
+  BEGIN Recd := FALSE
   END Init;
 
 BEGIN Init
diff -Naur experimental2_orig/Kernel.Mod.txt experimental2/Kernel.Mod.txt
--- experimental2_orig/Kernel.Mod.txt	2016-12-27 23:28:21.999913000 +0100
+++ experimental2/Kernel.Mod.txt	2016-12-27 23:24:08.229520900 +0100
@@ -1,9 +1,8 @@
 MODULE Kernel;  (*NW/PR  11.4.86 / 27.12.95 / 4.2.2014 / AP 1.10.18 Experimental Oberon*)
   IMPORT SYSTEM;
   CONST SectorLength* = 1024;
-    timer = -64; spiData = -48; spiCtrl = -44;
-    CARD0 = 1; SPIFAST = 4;
-    FSoffset = 80000H; (*256MB in 512-byte blocks*)
+    timer = -64;
+    FSoffset = 0H; (*256MB in 512-byte blocks*)
     mapsize = 10000H; (*1K sectors, 64MB*)
 
   TYPE Sector* = ARRAY SectorLength OF BYTE;
@@ -14,7 +13,6 @@
     stackOrg*, stackSize*, MemLim*: INTEGER;
     clock: INTEGER;
     list0, list1, list2, list3: INTEGER;  (*lists of free blocks of size n*256, 128, 64, 32 bytes*)
-    data: INTEGER; (*SPI data in*)
     sectorMap: ARRAY mapsize DIV 32 OF SET;
     
 (* ---------- New: heap allocation ----------*)
@@ -218,74 +216,23 @@
 
 (* ---------- Disk storage management ----------*)
 
-  PROCEDURE SPIIdle(n: INTEGER); (*send n FFs slowly with no card selected*)
-  BEGIN SYSTEM.PUT(spiCtrl, 0);
-    WHILE n > 0 DO DEC(n); SYSTEM.PUT(spiData, -1);
-      REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0);
-      SYSTEM.GET(spiData, data)
-    END
-  END SPIIdle;
-
-  PROCEDURE SPI(n: INTEGER); (*send&rcv byte slowly with card selected*)
-  BEGIN SYSTEM.PUT(spiCtrl, CARD0); SYSTEM.PUT(spiData, n);
-    REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0);
-    SYSTEM.GET(spiData, data)
-  END SPI;
-
-  PROCEDURE SPICmd(n, arg: INTEGER);
-    VAR i, crc: INTEGER;
-  BEGIN (*send cmd*)
-    REPEAT SPIIdle(1) UNTIL data = 255; (*flush while unselected*)
-    REPEAT SPI(255) UNTIL data = 255; (*flush while selected*)
-    IF n = 8 THEN crc := 135 ELSIF n = 0 THEN crc := 149 ELSE crc := 255 END;
-    SPI(n MOD 64 + 64); (*send command*)
-    FOR i := 24 TO 0 BY -8 DO SPI(ROR(arg, i)) END; (*send arg*)
-    SPI(crc); i := 32;
-    REPEAT SPI(255); DEC(i) UNTIL (data < 80H) OR (i = 0)
-  END SPICmd;
-
-  PROCEDURE SDShift(VAR n: INTEGER);
-    VAR data: INTEGER;
-  BEGIN SPICmd(58, 0);  (*CMD58 get card capacity bit*)
-    SYSTEM.GET(spiData, data); SPI(-1);
-    IF (data # 0) OR ~SYSTEM.BIT(spiData, 6) THEN n := n * 512 END ;  (*non-SDHC card*)
-    SPI(-1); SPI(-1); SPIIdle(1)  (*flush response*)
-  END SDShift;
-
-  PROCEDURE ReadSD(src, dst: INTEGER);
-    VAR i: INTEGER;
-  BEGIN SDShift(src); SPICmd(17, src); ASSERT(data = 0); (*CMD17 read one block*)
-    i := 0; (*wait for start data marker*)
-    REPEAT SPI(-1); INC(i) UNTIL data = 254;
-    SYSTEM.PUT(spiCtrl, SPIFAST + CARD0);
-    FOR i := 0 TO 508 BY 4 DO
-      SYSTEM.PUT(spiData, -1);
-      REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0);
-      SYSTEM.GET(spiData, data); SYSTEM.PUT(dst, data); INC(dst, 4)
-    END;
-    SPI(255); SPI(255); SPIIdle(1) (*may be a checksum; deselect card*)
-  END ReadSD;
-
-  PROCEDURE WriteSD(dst, src: INTEGER);
-    VAR i, n: INTEGER; x: BYTE;
-  BEGIN SDShift(dst); SPICmd(24, dst); ASSERT(data = 0); (*CMD24 write one block*)
-    SPI(254); (*write start data marker*)
-    SYSTEM.PUT(spiCtrl, SPIFAST + CARD0);
-    FOR i := 0 TO 508 BY 4 DO
-      SYSTEM.GET(src, n); INC(src, 4); SYSTEM.PUT(spiData, n);
-      REPEAT UNTIL SYSTEM.BIT(spiCtrl, 0)
-    END;
-    SPI(255); SPI(255); (*dummy checksum*) i := 0;
-    REPEAT SPI(-1); INC(i); UNTIL (data MOD 32 = 5) OR (i = 10000);
-    ASSERT(data MOD 32 = 5); SPIIdle(1) (*deselect card*)
-  END WriteSD;
-
   PROCEDURE InitSecMap*;
     VAR i: INTEGER;
   BEGIN NofSectors := 0; sectorMap[0] := {0 .. 31}; sectorMap[1] := {0 .. 31};
     FOR i := 2 TO mapsize DIV 32 - 1 DO sectorMap[i] := {} END
   END InitSecMap;
 
+  PROCEDURE LastUsedSector*(): INTEGER;
+  VAR i, j, secno: INTEGER;
+  BEGIN
+    i := mapsize DIV 32 - 1;
+    WHILE sectorMap[i] = {} DO DEC(i) END;
+    FOR j := 0 TO 31 DO
+      IF j IN sectorMap[i] THEN secno := i * 32 + j END;
+    END;
+  RETURN secno * 29
+  END LastUsedSector;
+
   PROCEDURE MarkSector*(sec: INTEGER);
   BEGIN sec := sec DIV 29; ASSERT(SYSTEM.H(0) = 0);
     INCL(sectorMap[sec DIV 32], sec MOD 32); INC(NofSectors)
@@ -308,15 +255,24 @@
 
   PROCEDURE GetSector*(src: INTEGER; VAR dst: Sector);
   BEGIN src := src DIV 29; ASSERT(SYSTEM.H(0) = 0);
-    src := src * 2 + FSoffset;
-    ReadSD(src, SYSTEM.ADR(dst)); ReadSD(src+1, SYSTEM.ADR(dst)+512) 
+    src := src + FSoffset DIV 2;
+    SYSTEM.PUT(-28, SYSTEM.ADR(dst));
+    SYSTEM.PUT(-28, 080000000H + src);
   END GetSector;
   
   PROCEDURE PutSector*(dst: INTEGER; VAR src: Sector);
   BEGIN dst := dst DIV 29; ASSERT(SYSTEM.H(0) =  0);
-    dst := dst * 2 + FSoffset;
-    WriteSD(dst, SYSTEM.ADR(src)); WriteSD(dst+1, SYSTEM.ADR(src)+512)
+    dst := dst + FSoffset DIV 2;
+    SYSTEM.PUT(-28, SYSTEM.ADR(src));
+    SYSTEM.PUT(-28, 0C0000000H + dst);
   END PutSector;
+
+  PROCEDURE TrimAllSectorsAfter*(sec: INTEGER);
+  BEGIN sec := sec DIV 29; ASSERT(SYSTEM.H(0) = 0);
+    sec := sec + FSoffset DIV 2 + 1;
+    SYSTEM.PUT(-28, 3FFFFFFFH);
+    SYSTEM.PUT(-28, 0C0000000H + sec);
+  END TrimAllSectorsAfter;
 
 (*-------- Miscellaneous procedures----------*)
 
diff -Naur experimental2_orig/Oberon.Mod.txt experimental2/Oberon.Mod.txt
--- experimental2_orig/Oberon.Mod.txt	2016-12-27 23:28:22.049297500 +0100
+++ experimental2/Oberon.Mod.txt	2016-12-27 23:23:28.963576900 +0100
@@ -417,6 +417,7 @@
   PROCEDURE Loop*;
     VAR V: Viewers.Viewer; M: InputMsg; N: Viewers.ControlMsg;
       prevX, prevY, X, Y, t: INTEGER; keys: SET; ch: CHAR;
+      minTime: INTEGER;
   BEGIN
     REPEAT
       Input.Mouse(keys, X, Y);
@@ -439,9 +440,15 @@
           IF Y >= DH THEN Y := DH END ;
           M.Y := Y; M.keys := keys; V := Viewers.This(Viewers.CurDisplay, X, Y); V.handle(V, M); prevX := X; prevY := Y
         END ;
+        SYSTEM.PUT(-64, minTime);
         CurTask := CurTask.next; t := Kernel.Time();
         IF t >= CurTask.nextTime THEN
           CurTask.nextTime := t + CurTask.period; CurTask.state := active; CurTask.handle; CurTask.state := idle
+          ;minTime := CurTask.nextTime;
+          FOR t := 1 TO NofTasks DO
+            CurTask := CurTask.next;
+            IF CurTask.nextTime < minTime THEN minTime := CurTask.nextTime END;
+          END
         END
       END
     UNTIL FALSE
diff -Naur experimental2_orig/Display.Mod.txt experimental2/Display.Mod.txt
--- experimental2_orig/Display.Mod.txt	2017-11-18 22:45:25.346834800 +0100
+++ experimental2/Display.Mod.txt	2017-11-18 22:47:08.224040700 +0100
@@ -166,6 +166,11 @@
   END ReplPattern;
 
 BEGIN Base := base; Width := 1024; Height := 768;
+  SYSTEM.GET(base, arrow);
+  IF arrow = 53697A65H THEN
+    SYSTEM.GET(base+4, Width);
+    SYSTEM.GET(base+8, Height);
+  END;
   arrow := SYSTEM.ADR($0F0F 0060 0070 0038 001C 000E 0007 8003 C101 E300 7700 3F00 1F00 3F00 7F00 FF00$);
   star := SYSTEM.ADR($0F0F 8000 8220 8410 8808 9004 A002 C001 7F7F C001 A002 9004 8808 8410 8220 8000$);
   hook := SYSTEM.ADR($0C0C 070F 8707 C703 E701 F700 7F00 3F00 1F00 0F00 0700 0300 01$);
